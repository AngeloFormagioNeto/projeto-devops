name: CI/CD Pipeline

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

env:
  IMAGE_NAME: meu-app-react
  DOCKER_REGISTRY: docker.io

jobs:
  build-test-package:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.set-tag.outputs.tag }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        npm install --save-dev @babel/plugin-proposal-private-property-in-object
        npx update-browserslist-db@latest

    - name: Run tests
      run: |
        npx react-scripts test \
        --testMatch="**/src/components/**/*.test.js" \
        --watchAll=false \
        --detectOpenHandles \
        --passWithNoTests

    - name: Build production bundle
      run: npm run build

    - name: Set image tag
      id: set-tag
      run: |
        # Usa o SHA do commit como tag
        echo "tag=$GITHUB_SHA" >> $GITHUB_OUTPUT

    - name: Build Docker image
      run: |
        docker build \
          -t ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.set-tag.outputs.tag }} \
          -t ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest \
          .

    - name: Save Docker image
      uses: actions/upload-artifact@v3
      with:
        name: docker-image
        path: |
          ${{ env.IMAGE_NAME }}.tar
        retention-days: 1

  push-to-dockerhub:
    needs: build-test-package
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: Download Docker image
      uses: actions/download-artifact@v3
      with:
        name: docker-image

    - name: Load Docker image
      run: docker load -i ${{ env.IMAGE_NAME }}.tar

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Push Docker images
      run: |
        docker push ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ needs.build-test-package.outputs.image-tag }}
        docker push ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest

    - name: Success notification
      run: |
        echo "Images successfully pushed to Docker Hub!"
        echo "Latest: ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest"
        echo "Versioned: ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ needs.build-test-package.outputs.image-tag }}"