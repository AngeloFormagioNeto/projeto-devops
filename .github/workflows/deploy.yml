name: CI/CD Pipeline with Netlify Deploy

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

env:
  IMAGE_NAME: meu-app-react
  DOCKER_REGISTRY: docker.io
  TF_VERSION: 1.8.4

jobs:
  build-test-package:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.set-tag.outputs.tag }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        npm install --save-dev @babel/plugin-proposal-private-property-in-object
        npx update-browserslist-db@latest

    - name: Run tests
      run: |
        npx react-scripts test \
        --testMatch="**/src/components/**/*.test.js" \
        --watchAll=false \
        --detectOpenHandles \
        --passWithNoTests

    - name: Build production bundle
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: build/
        retention-days: 1

    - name: Set image tag
      id: set-tag
      run: |
        echo "tag=$GITHUB_SHA" >> $GITHUB_OUTPUT

    - name: Build Docker image
      run: |
        docker build \
          -t ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:$GITHUB_SHA \
          -t ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest \
          .
        
        docker save -o image.tar \
          ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:$GITHUB_SHA \
          ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest

    - name: Upload Docker image
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: image.tar
        retention-days: 1

  push-to-dockerhub:
    needs: build-test-package
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: Download Docker image
      uses: actions/download-artifact@v4
      with:
        name: docker-image

    - name: Load Docker image
      run: docker load -i image.tar

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Push Docker images
      run: |
        docker push "${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:$GITHUB_SHA"
        docker push "${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest"

    - name: Print image info
      run: |
        echo "Images pushed to Docker Hub"
        echo "Latest: ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest"
        echo "Versioned: ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:$GITHUB_SHA"

  deploy-to-netlify:
    needs: build-test-package
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: build

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        terraform_wrapper: false

    - name: Configure AWS CLI (temporário para resolver problema de registry)
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Terraform Init
      run: |
        terraform init -reconfigure \
          -backend-config="region=us-east-1" \
          -plugin-dir="$HOME/.terraform.d/plugins"
      working-directory: terraform
      env:
        TF_PLUGIN_CACHE_DIR: "$HOME/.terraform.d/plugin-cache"

    - name: Terraform Apply
      env:
        NETLIFY_TOKEN: ${{ secrets.NETLIFY_TOKEN }}
      run: |
        terraform apply -auto-approve -var="netlify_token=$NETLIFY_TOKEN"
      working-directory: terraform

    - name: Get site URL
      id: site-url
      run: |
        url=$(terraform output -raw site_url)
        echo "url=$url" >> $GITHUB_OUTPUT
      working-directory: terraform

    - name: Print deployment info
      run: |
        echo "✅ Deployment successful!"
        echo "🌐 Site URL: ${{ steps.site-url.outputs.url }}"