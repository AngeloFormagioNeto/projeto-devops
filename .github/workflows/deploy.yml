name: CI/CD Pipeline

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

env:
  IMAGE_NAME: meu-app-react
  DOCKER_REGISTRY: docker.io
  TERRAFORM_DIR: terraform
  AWS_REGION: us-east-1
  APP_NAME: react-app

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Necessário para o Terraform

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        npm install --save-dev @babel/plugin-proposal-private-property-in-object
        npx update-browserslist-db@latest

    - name: Test component rendering
      run: |
        npx react-scripts test \
        --testMatch="**/src/components/**/*.test.js" \
        --watchAll=false \
        --detectOpenHandles \
        --passWithNoTests

    - name: Run build
      run: npm run build

    - name: Build Docker image
      run: |
        docker build \
          -t ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:$GITHUB_SHA \
          -t ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest \
          .
        
        # Salvar ambas as tags no arquivo TAR
        docker save -o image.tar \
          ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:$GITHUB_SHA \
          ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest

    - name: Upload Docker image
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: image.tar
        retention-days: 1

  push-to-registry:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    timeout-minutes: 20
    
    steps:
    - name: Download Docker image
      uses: actions/download-artifact@v4
      with:
        name: docker-image
        path: downloaded_image

    - name: Load Docker image
      run: docker load -i downloaded_image/image.tar

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Push Docker images
      run: |
        docker push ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:$GITHUB_SHA
        docker push ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest

    - name: Print image info
      run: |
        echo "Image pushed to:"
        echo "${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest"
        echo "${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:$GITHUB_SHA"

  deploy-to-aws:
    needs: [build-and-test, push-to-registry]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    timeout-minutes: 30
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.8.0
        terraform_wrapper: false

    - name: Terraform Init
      run: terraform init -input=false
      working-directory: ${{ env.TERRAFORM_DIR }}

    - name: Terraform Format Check
      run: terraform fmt -check
      working-directory: ${{ env.TERRAFORM_DIR }}

    - name: Terraform Validate
      run: terraform validate
      working-directory: ${{ env.TERRAFORM_DIR }}

    - name: Terraform Plan
      run: |
        terraform plan \
          -var="app_name=${{ env.APP_NAME }}" \
          -var="app_image=${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:$GITHUB_SHA" \
          -out=tfplan
      working-directory: ${{ env.TERRAFORM_DIR }}

    - name: Terraform Apply
      run: terraform apply -auto-approve tfplan
      working-directory: ${{ env.TERRAFORM_DIR }}

    - name: Get ALB DNS
      id: alb-dns
      run: |
        echo "url=http://$(terraform output -raw alb_dns_name)" >> $GITHUB_OUTPUT
      working-directory: ${{ env.TERRAFORM_DIR }}

    - name: Show Application URL
      run: |
        echo "Aplicação implantada com sucesso!"
        echo "URL: ${{ steps.alb-dns.outputs.url }}"
        echo "Acesse em: ${{ steps.alb-dns.outputs.url }}"
        
    - name: Post Deployment Health Check
      run: |
        # Aguarda 30 segundos para o deploy completar
        sleep 30
        curl --retry 5 --retry-delay 10 --max-time 5 -sSf ${{ steps.alb-dns.outputs.url }}

    - name: Save Application URL
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: "✅ Aplicação implantada com sucesso!\n\nURL: ${{ steps.alb-dns.outputs.url }}"
          })
      if: always() && github.event_name == 'pull_request'