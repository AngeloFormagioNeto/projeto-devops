name: projeto-ci-cd-fase-1

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

env:
  IMAGE_NAME: meu-app-react
  DOCKER_REGISTRY: docker.io
  VERCEL_PROJECT_NAME: meu-app-react

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        npm install --save-dev @babel/plugin-proposal-private-property-in-object
        npx update-browserslist-db@latest

    - name: Test component rendering
      run: |
        npx react-scripts test \
        --testMatch="**/src/components/**/*.test.js" \
        --watchAll=false \
        --detectOpenHandles \
        --passWithNoTests

    - name: Run build
      run: npm run build

    - name: Build Docker image
      run: |
        docker build \
          -t ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:$GITHUB_SHA \
          -t ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest \
          .
        
        docker save -o image.tar \
          ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:$GITHUB_SHA \
          ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest

    - name: Upload Docker image
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: image.tar
        retention-days: 1

  push-to-registry:
    needs: build-and-test
    runs-on: ubuntu-latest
    # Correção na condição if
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: Download Docker image
      uses: actions/download-artifact@v4
      with:
        name: docker-image
        path: downloaded_image

    - name: Load Docker image
      run: docker load -i downloaded_image/image.tar

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Push Docker images
      run: |
        docker push ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:$GITHUB_SHA
        docker push ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest

    - name: Print image info
      run: |
        echo "Image pushed to:"
        echo "${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest"
        echo "${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:$GITHUB_SHA"

  deploy-to-vercel:
    needs: push-to-registry
    runs-on: ubuntu-latest
    # Correção na condição if
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.7.5

    - name: Terraform Init
      run: terraform -chdir=terraform init

    - name: Terraform Apply
      run: |
        terraform -chdir=terraform apply -auto-approve \
          -var="vercel_api_token=${{ secrets.VERCEL_API_TOKEN }}" \
          -var="docker_image=${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:$GITHUB_SHA" \
          -var="project_name=${{ env.VERCEL_PROJECT_NAME }}" \
          -var="github_repo=${{ github.repository }}"

    - name: Get Vercel URL
      id: vercel-url
      run: |
        URL=$(terraform -chdir=terraform output -raw vercel_url)
        echo "url=$URL" >> $GITHUB_OUTPUT

    - name: Show Vercel URL
      run: |
        echo "Deployed to: ${{ steps.vercel-url.outputs.url }}"