name: CI/CD Pipeline

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

env:
  IMAGE_NAME: meu-app-react
  DOCKER_REGISTRY: docker.io
  TERRAFORM_DIR: terraform
  AWS_REGION: us-east-1

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm test

    - name: Run build
      run: npm run build

    - name: Build Docker image
      run: |
        docker build \
          -t ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:$GITHUB_SHA \
          -t ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest \
          .
        
        docker save -o image.tar \
          ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:$GITHUB_SHA \
          ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest

    - name: Upload Docker image
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: image.tar
        retention-days: 1

  push-to-registry:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    timeout-minutes: 20
    
    steps:
    - name: Download Docker image
      uses: actions/download-artifact@v4
      with:
        name: docker-image
        path: downloaded_image

    - name: Load Docker image
      run: docker load -i downloaded_image/image.tar

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Push Docker images
      run: |
        docker push ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:$GITHUB_SHA
        docker push ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest

    - name: Print image info
      run: |
        echo "Image pushed to:"
        echo "${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest"
        echo "${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:$GITHUB_SHA"

  deploy-to-aws:
    needs: [build-and-test, push-to-registry]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    timeout-minutes: 40
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.8.0

    - name: Prepare Terraform Variables
      run: |
        echo "app_image=${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:$GITHUB_SHA" >> $GITHUB_ENV
        
        SHORT_NAME="app-$(echo $GITHUB_SHA | cut -c1-8)"
        echo "app_name=$SHORT_NAME" >> $GITHUB_ENV
        echo "environment=production" >> $GITHUB_ENV
        echo "is_temporary=false" >> $GITHUB_ENV

    - name: Terraform Init
      run: terraform init -input=false
      working-directory: ${{ env.TERRAFORM_DIR }}

    - name: Terraform Format
      run: terraform fmt -recursive
      working-directory: ${{ env.TERRAFORM_DIR }}

    - name: Terraform Validate
      run: terraform validate
      working-directory: ${{ env.TERRAFORM_DIR }}

    - name: Terraform Plan
      run: |
        terraform plan -input=false \
          -var="app_name=${{ env.app_name }}" \
          -var="app_image=${{ env.app_image }}" \
          -var="app_port=80" \
          -var="app_count=1" \
          -var="environment=${{ env.environment }}" \
          -var="is_temporary=${{ env.is_temporary }}" \
          -out=tfplan
      working-directory: ${{ env.TERRAFORM_DIR }}

    - name: Terraform Apply
      run: |
        # Aplicar com tratamento de erro
        terraform apply -auto-approve -input=false tfplan || \
        (echo "##[error]Terraform apply failed"; exit 1)
        
        # Forçar saída com código de erro em caso de falha
      working-directory: ${{ env.TERRAFORM_DIR }}
      env:
        TF_INPUT: 0

    - name: Get ALB DNS
      id: alb-dns
      run: |
        echo "url=http://$(terraform output -raw alb_dns_name)" >> $GITHUB_OUTPUT
      working-directory: ${{ env.TERRAFORM_DIR }}

    - name: Show Application URL
      run: |
        echo "Aplicação implantada com sucesso!"
        echo "URL: ${{ steps.alb-dns.outputs.url }}"
        
    - name: Health Check
      run: |
        sleep 60
        curl --retry 3 --retry-delay 20 -sSf ${{ steps.alb-dns.outputs.url }}